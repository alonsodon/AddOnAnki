import re, osfrom subprocess import Popenfrom aqt import mw, gui_hooksfrom aqt.qt import *from .corpus import *from .interfaz import *from distutils.spawn import (  # pylint: disable=import-error,no-name-in-module    find_executable,)class GaudeteDialog(QDialog):    def __init__(self):        QDialog.__init__(self, mw, Qt.Window)        self.ui = Ui_DialogoGaudete()        self.ui.setupUi(self)        # Conexión de métodos del interfaz gráfico        self.ui.btn_buscar.clicked.connect(self.listar_ejemplos)        self.ui.btn_anadir.clicked.connect(self.anadir_tarjeta)        self.ui.cbx_idiomas.activated[str].connect(self.cargar_corpus)        self.ui.btn_cancelar.clicked.connect(self.cancelar)        self.ui.btn_corpus.clicked.connect(self.indexar_corpus)        self.ui.btn_fotogramas.clicked.connect(self.anadir_fotograma)        self.ui.btn_ejemplos_avanza.clicked.connect(self.avanza_ejemplos)        self.ui.btn_ejemplos_retrocede.clicked.connect(self.retrocede_ejemplos)        # Conexión de combinación de teclas para hacer huecos        shortcut = QShortcut(QKeySequence("Ctrl+S"), self.ui.txt_huecos)        shortcut.activated.connect(self.hacer_hueco)        # Expresión regular para ficheros csv        self.re_csv_name = re.compile(            r'(?P<carpeta_serie>.*)\\._(?P<series_name>[^_]+)_S(?P<season>\d+)E(?P<episode>\d+)\..+'        )        # Expresión regular para ficheros dic_palabras_idioma.json        self.re_json_name = re.compile(            r'dic_palabras_(?P<idioma>[^.]+)\.json'        )        # Expresión regular para guiones bajos, resaltados al ocultar        self.re_hidden = re.compile(r'(_+)')        # Inicialización de datos        self.corpus = None        self.tarjeta = None        self.siguiente_ejemplo = 0        # Inicialización de tipos de nota        self.anadir_modelo_con_audio()        self.anadir_modelo_sin_audio()        # Desactivar interfaz hasta elegir idioma        self.reset()        # Mostrar ventana y lanzar ejecución        self.show()        self.exec_()    def reset(self):        self.ui.btn_buscar.setDisabled(True)        self.ui.line_palabra_buscar.setDisabled(True)        self.ui.sbn_cantidad_ejemplos.setDisabled(True)        self.ui.sll_ejemplos.setDisabled(True)        self.ocultar_plantilla()        self.ocultar_ejemplos(0,ocultar=False)        # Escanear corpus para buscar idiomas disponibles        dirs = os.listdir(os.path.dirname(__file__))        idiomas = []        for file in dirs:            m = self.re_json_name.fullmatch(file.strip())            if m:                idiomas.append(m['idioma'].upper())        idiomas.sort()        self.ui.cbx_idiomas.clear()        self.ui.cbx_idiomas.addItems(idiomas)        self.ui.cbx_idiomas.setCurrentIndex(-1)    def cancelar(self):        self.close()    def cargar_corpus(self, idioma):        try:            self.corpus = Corpus(idioma.lower())            self.ui.btn_buscar.setEnabled(True)            self.ui.line_palabra_buscar.setEnabled(True)            self.ui.sbn_cantidad_ejemplos.setEnabled(True)        except Exception as e:            QMessageBox.warning(self, 'Corpus', 'Debes indexar el corpus primero')            self.corpus = None        self.ui.line_palabra_buscar.setText('')        self.ocultar_ejemplos(0,ocultar=False)        self.ui.sll_ejemplos.setEnabled(False)        self.ocultar_plantilla()    def indexar_corpus(self):        tiempo = Corpus.indexar_corpus(self)        QMessageBox.information(self, 'Corpus', f'¡Indexación terminada en {tiempo} segundos!')        self.reset()    def anadir_fotograma(self):        if self.tarjeta == None:            QMessageBox.warning(self, 'Fotograma', 'Debes buscar y seleccionar una frase primero')        else:            fichero = QFileDialog.getOpenFileName(self, 'Abrir imagen',                                               os.path.dirname(__file__),                                               'Ficheros de imagen (*.png *.jpg *.bmp)')            print(fichero)            if fichero:                pixmap = QPixmap(fichero[0])                pixmap = pixmap.scaledToHeight(self.ui.frm_fotograma.height())                self.ui.frm_fotograma.setHidden(False)                self.ui.frm_fotograma.setPixmap(pixmap)                self.tarjeta['imagen'] = fichero[0]    def ocultar_plantilla(self):        self.ui.frm_fotograma.setPixmap(QPixmap())        self.ui.txt_footer1.setText("")        self.ui.txt_footer2.setText("")        self.ui.txt_header1.setText("")        self.ui.txt_header2.setText("")        self.ui.chk_header1.setDisabled(True)        self.ui.chk_header2.setDisabled(True)        self.ui.chk_footer1.setDisabled(True)        self.ui.chk_footer1.setDisabled(True)        self.ui.txt_huecos.setDisabled(True)        self.ui.txt_header1.setDisabled(True)        self.ui.txt_header2.setDisabled(True)        self.ui.txt_footer1.setDisabled(True)        self.ui.txt_footer2.setDisabled(True)        self.ui.btn_fotogramas.setDisabled(True)        self.ui.line_sinonimos.setDisabled(True)        self.ui.line_definicion.setDisabled(True)        self.ui.chk_audio.setDisabled(True)        self.ui.btn_anadir.setDisabled(True)    # Desactiva ejemplos (oculta y desconecta toggled del radiobutton) desde un índice determinado    def ocultar_ejemplos(self, desde, ocultar = True):        self.ui.btng_ejemplos.setExclusive(False)        for indice in range(desde, 15):            rbn = 'rbn_ejemplo' + str(indice)            rbn_widget = self.findChild(QtWidgets.QRadioButton, rbn)            texto = 'txt_ejemplo' + str(indice)            txt_widget = self.findChild(QtWidgets.QTextEdit, texto)            if rbn_widget.receivers(rbn_widget.toggled) > 0:                rbn_widget.toggled.disconnect()            txt_widget.setText('')            txt_widget.setHidden(ocultar)            rbn_widget.setChecked(False)            rbn_widget.setHidden(ocultar)        self.ui.txt_huecos.setText('')        self.ui.btng_ejemplos.setExclusive(True)        if desde == 0:            self.ui.sll_ejemplos.setDisabled(True)        else:            self.ui.sll_ejemplos.setDisabled(False)    def listar_ejemplos(self, desde=0):        self.ocultar_plantilla()        if self.ui.cbx_idiomas.currentIndex() != -1:            if self.ui.line_palabra_buscar.text() != '':                self.ui.sll_ejemplos.setHidden(False)                cadena = self.ui.line_palabra_buscar.text()                force_lower = self.ui.cbx_idiomas.currentText() != 'ALEMAN'                self.lista_ejemplos = self.corpus.buscar_palabra(cadena, desde,                                                                 self.ui.sbn_cantidad_ejemplos.value(),                                                                 force_lower)                if (self.lista_ejemplos != None):                    contador = 0                    self.ocultar_ejemplos(0)                    for ejemplo in self.lista_ejemplos:                        texto = "txt_ejemplo" + str(contador)                        txt_widget = self.findChild(QtWidgets.QTextEdit, texto)                        txt_widget.setText(ejemplo[1] + "\n\n" + ejemplo[2])                        rbn = "rbn_ejemplo" + str(contador)                        rbn_widget = self.findChild(QtWidgets.QRadioButton, rbn)                        rbn_widget.toggled.connect(                            lambda w=rbn_widget, f=ejemplo[3], i=ejemplo[4]:                                self.frase_seleccionada(checked=w,ruta_csv=f,index=i)                        )                        rbn_widget.setHidden(False)                        txt_widget.setHidden(False)                        contador = contador + 1                    self.ocultar_ejemplos(contador) #para ocultar el resto de widgets, si p.e. hay solo 5 ejemplos, se ocultan del 5 al 15 los txt y los rbn                    self.siguiente_ejemplo = desde + len(self.lista_ejemplos)                    if len(self.lista_ejemplos) < self.ui.sbn_cantidad_ejemplos.value():                        self.ui.btn_ejemplos_avanza.setDisabled(True)                    else:                        self.ui.btn_ejemplos_avanza.setEnabled(True)                    if desde == 0:                        self.ui.btn_ejemplos_retrocede.setDisabled(True)                    else:                        self.ui.btn_ejemplos_retrocede.setEnabled(True)                elif desde == 0:                    QMessageBox.warning(self, 'Resultado de búsqueda', 'No se han encontrado resultados para: '                                        + self.ui.line_palabra_buscar.text())            else:                QMessageBox.warning(self, 'Término', 'Debes introducir una búsqueda no vacía')        else:            QMessageBox.warning(self, 'Idioma', 'Debes seleccionar un idioma primero')    def avanza_ejemplos(self):        self.listar_ejemplos(desde=self.siguiente_ejemplo)    def retrocede_ejemplos(self):        print(self.siguiente_ejemplo,self.ui.sbn_cantidad_ejemplos.value())        desde = self.siguiente_ejemplo - self.ui.sbn_cantidad_ejemplos.value()*2        if desde < 0:            desde = 0        self.listar_ejemplos(desde)    def convertRCtoBR(self, text: str):        return text.replace('\n', '<br>')    def convertRCtoTD(self, text: str):        return text.replace('\n\n', '<td>')    def frase_seleccionada(self, checked, ruta_csv, index):        if checked:            if index-2 >= 0:                self.ui.txt_header1.setText(self.corpus.dic_ficheros[ruta_csv][index - 2][1] + "\n\n" +                                            self.corpus.dic_ficheros[ruta_csv][index - 2][2])                self.ui.txt_header1.setEnabled(True)                self.ui.chk_header1.setEnabled(True)            else:                self.ui.txt_header1.setText('')                self.ui.txt_header1.setDisabled(True)                self.ui.chk_header1.setDisabled(True)            if index-1 >= 0:                self.ui.txt_header2.setText(self.corpus.dic_ficheros[ruta_csv][index - 1][1] + "\n\n" +                                            self.corpus.dic_ficheros[ruta_csv][index - 1][2])                self.ui.txt_header2.setEnabled(True)                self.ui.chk_header2.setEnabled(True)            else:                self.ui.txt_header2.setText('')                self.ui.txt_header2.setDisabled(True)                self.ui.chk_header2.setDisabled(True)            if index+1 < len(self.corpus.dic_ficheros[ruta_csv]):                self.ui.txt_footer1.setText(self.corpus.dic_ficheros[ruta_csv][index + 1][1] + "\n\n" +                                            self.corpus.dic_ficheros[ruta_csv][index + 1][2])                self.ui.txt_footer1.setEnabled(True)                self.ui.chk_footer1.setEnabled(True)            else:                self.ui.txt_footer1.setText('')                self.ui.txt_footer1.setDisabled(True)                self.ui.chk_footer1.setDisabled(True)            if index+2 < len(self.corpus.dic_ficheros[ruta_csv]):                self.ui.txt_footer2.setText(self.corpus.dic_ficheros[ruta_csv][index + 2][1] + "\n\n" +                                            self.corpus.dic_ficheros[ruta_csv][index + 2][2])                self.ui.txt_footer2.setEnabled(True)                self.ui.chk_footer2.setEnabled(True)            else:                self.ui.txt_footer2.setText('')                self.ui.txt_footer2.setDisabled(True)                self.ui.chk_footer2.setDisabled(True)            datos = self.extraer_serie(ruta_csv)            self.ui.txt_huecos.setText(self.corpus.dic_ficheros[ruta_csv][index][1] + "\n\n" +                                        self.corpus.dic_ficheros[ruta_csv][index][2] + "\n\n" +                                       ("[%s;temporada %s;episodio %s]") % datos)            self.ui.txt_huecos.setEnabled(True)            # Se añaden los datos de la tarjeta que ya se tienen            self.tarjeta = {                'header1': self.convertRCtoTD(self.ui.txt_header1.toPlainText()),                'header2': self.convertRCtoTD(self.ui.txt_header2.toPlainText()),                'footer1': self.convertRCtoTD(self.ui.txt_footer1.toPlainText()),                'footer2': self.convertRCtoTD(self.ui.txt_footer2.toPlainText()),                'oracion': self.convertRCtoBR(self.corpus.dic_ficheros[ruta_csv][index][1] + '<br><br>' + self.corpus.dic_ficheros[ruta_csv][index][2]),                'huecos': self.convertRCtoBR(self.ui.txt_huecos.toPlainText())            }            # Extracción de los instantes de comienzo y fin de la frase            re_instante_tiempo = re.compile(r'(?P<tiempo>.*\d\d?)s?')            comienzo = re_instante_tiempo.fullmatch(self.corpus.dic_ficheros[ruta_csv][index][0])            fin = re_instante_tiempo.fullmatch(self.corpus.dic_ficheros[ruta_csv][index+1][0])            # El método cargar_imagen_audio genera los ficheros png y mp3 de la frase            self.cargar_imagen_audio(ruta_csv, comienzo['tiempo'], fin['tiempo'])            # Activar botón para añadido de tarjeta y campos de sinónimos y definición            self.ui.btn_anadir.setEnabled(True)            self.ui.line_sinonimos.setEnabled(True)            self.ui.line_definicion.setEnabled(True)    def extraer_serie(self, ruta_csv):        m = self.re_csv_name.fullmatch(ruta_csv)        return (m['series_name'], m['season'], m['episode'])    def cargar_imagen_audio(self, ruta_csv, comienzo, fin):        m = self.re_csv_name.fullmatch(ruta_csv)        if not m:            QMessageBox.warning(self, 'Error', "Archivo csv con nombre incorrecto" + ruta_csv)            return None        serie = m["series_name"]        temporada = int(m["season"])        episodio = int(m["episode"])        re_mp4 = re.compile(r"\[S%02d\.E%02d\]" % (temporada, episodio))        carpeta_serie = m["carpeta_serie"]        if not os.path.exists(carpeta_serie):            QMessageBox.warning(self, 'Error', "Carpeta: " + carpeta_serie + " no encontrada.")            return None        dirs = os.listdir(carpeta_serie)        ruta_completa = None        for file in dirs:            if re_mp4.match(file):                ruta_completa = carpeta_serie + os.path.sep + file                break        if ruta_completa == None:            QMessageBox.warning(self, 'Error', "Archivo mp4 con prefijo:" + re_mp4.pattern + " no encontrado.")            return None        dir_tmp = os.path.join(os.path.dirname(__file__), "tmp")        # Propiedades configurables de mpv: https://mpv.io/manual/stable/#properties        # Comandos de mpv: https://mpv.io/manual/stable/#list-of-input-commands        # PNG        fichero = os.path.join(dir_tmp, "gdt_imagen.png")        if os.path.exists(fichero):            os.remove(fichero)        cmd = find_executable('mpv')        print(cmd)        param1 = '--ao=null'                        # Anula el audio        param2 = '--vo=image'                       # La salida de vídeo son imágenes        param3 = '--vo-image-format=png'            # Las imágenes se generan en formato png        param4 = '--hr-seek=yes'                    # Se hace una búsqueda de las imágenes lo más precisa posible        param5 = '--vo-image-outdir=' + dir_tmp     # Lugar en el que se vuelcan las imágenes        param6 = '--start=' + comienzo              # Instante de inicio        param7 = '--end=' + comienzo                # Instante de fin (mismo que inicio para capturar 1 imagen        param8 = '--o=' + fichero                   # Fichero png generado        param9 = ruta_completa                      # Fichero de origen        process = Popen([cmd, param1, param2, param3, param4, param5, param6, param7, param8, param9])        process.wait()                              # Espera a que el comando finalice        if not os.path.exists(fichero):            QMessageBox.about(self, 'MPV', 'Problemas generando imagen')        else:            pixmap = QPixmap(fichero)            pixmap = pixmap.scaledToHeight(self.ui.frm_fotograma.height())            self.ui.frm_fotograma.setHidden(False)            self.ui.frm_fotograma.setPixmap(pixmap)            self.tarjeta['imagen'] = fichero        self.ui.btn_fotogramas.setEnabled(True)        # MP3        fichero = os.path.join(dir_tmp, "gdt_audio.mp3")        if os.path.exists(fichero):            os.remove(fichero)        cmd = find_executable('mpv')        param1 = '--no-video'                       # No genera vídeo        param2 = '--hr-seek=yes'                    # Se hace una búsqueda precisa del comienzo        param3 = '--start=' + comienzo              # Instante de inicio        param4 = '--end=' + fin                     # Instante de fin        param5 = '--o='+fichero                     # Fichero mp3 generado        param6 = ruta_completa                      # Fichero de origen        process = Popen([cmd, param1, param2, param3, param4, param5, param6])        process.wait()                              # Espera a que el comando finalice        if not os.path.exists(fichero):            QMessageBox.about(self, 'MPV', 'Problemas generando audio')            self.ui.chk_audio.setDisabled(True)        else:            self.tarjeta['audio'] = fichero            self.ui.chk_audio.setEnabled(True)    def anadir_modelo_con_audio(self):        # Comprobamos si el modelo ya está instalado en Anki        if not mw.col.models.by_name('gaudete with audio'):            # Creamos el modelo nuevo            model = mw.col.models.new('gaudete with audio')            # Estos serán los estilos css del template del modelo            css = """                .card {                 font-family: arial;                 font-size: 20px;                 text-align: center;                 color: black;                 background-color: white;                }                .pregunta {                 font-size: 18px;                }                .respuesta {                 font-size: 22px;                 color: #000080;                }                                .info {                 font-size: 16px;                }                                table, td {                 border-collapse: collapse;                 border: 1px solid;                }                                td {                 vertical-align: top;                 padding: 10px                }                """            model['css'] = css            # Se definen aquí los campos que nos hacen falta            mw.col.models.addField(model, mw.col.models.newField('Header'))            mw.col.models.addField(model, mw.col.models.newField('Oracion'))            mw.col.models.addField(model, mw.col.models.newField('Respuesta'))            mw.col.models.addField(model, mw.col.models.newField('Imagen'))            mw.col.models.addField(model, mw.col.models.newField('Audio'))            mw.col.models.addField(model, mw.col.models.newField('Footer'))            mw.col.models.addField(model, mw.col.models.newField('Sinonimos_Antonimos'))            mw.col.models.addField(model, mw.col.models.newField('Definicion'))            # Esta es la plantilla de visualización de los campos            t = mw.col.models.newTemplate('Card gaudete with audio')            t['qfmt'] = """<div class="pregunta">{{Header}}</div>                               <br>                               <div class="pregunta">{{Oracion}}</div>                               <br>                               <img src="{{Imagen}}">                               <br>                               <div class="pregunta">{{Footer}}</div>"""            t['afmt'] = """<div class="respuesta">{{Respuesta}}</div>                               <br>                               <hr>                               <br>                               <div class="pregunta">{{Header}}</div>                               <br>                               <div class="pregunta">{{Oracion}}</div>                               <br>                               <img src="{{Imagen}}">                               <br>                               <audio controls>                                <source src="{{Audio}}">                               </audio>                               <br>                               <div class="pregunta">{{Footer}}</div>                               <br>                               <hr>                               <br>                               <div class="info">Sinónimos / Antónimos: {{Sinonimos_Antonimos}}</div>                               <br>                               <div class="info">Definición: {{Definicion}}</div>"""            # Aquí se añade al modelo la plantilla anterior            mw.col.models.addTemplate(model, t)            # Aquí se añade el modelo a Anki            mw.col.models.add(model)    def anadir_modelo_sin_audio(self):        # Comprobamos si el modelo ya está instalado en Anki        if not mw.col.models.by_name('gaudete'):            # Creamos el modelo nuevo            model = mw.col.models.new('gaudete')            # Estos serán los estilos css del template del modelo            css = """                .card {                 font-family: arial;                 font-size: 20px;                 text-align: center;                 color: black;                 background-color: white;                }                .pregunta {                 font-size: 18px;                }                                .info {                 font-size: 16px;                }                .respuesta {                 font-size: 22px;                 color: #000080;                }                                table, td {                 border-collapse: collapse;                 border: 1px solid;                }                                td {                 vertical-align: top;                 padding: 10px                }                """            model['css'] = css            # Se definen aquí los campos que nos hacen falta            mw.col.models.addField(model, mw.col.models.newField('Header'))            mw.col.models.addField(model, mw.col.models.newField('Oracion'))            mw.col.models.addField(model, mw.col.models.newField('Respuesta'))            mw.col.models.addField(model, mw.col.models.newField('Imagen'))            mw.col.models.addField(model, mw.col.models.newField('Footer'))            mw.col.models.addField(model, mw.col.models.newField('Sinonimos_Antonimos'))            mw.col.models.addField(model, mw.col.models.newField('Definicion'))            # Esta es la plantilla de visualización de los campos            t = mw.col.models.newTemplate('Card gaudete')            t['qfmt'] = """<div class="pregunta">{{Header}}</div>                               <br>                               <div class="pregunta">{{Oracion}}</div>                               <br>                               <img src="{{Imagen}}">                               <br>                               <div class="pregunta">{{Footer}}</div>"""            t['afmt'] = """<div class="respuesta">{{Respuesta}}</div>                               <br>                               <hr>                               <br>                               <div class="pregunta">{{Header}}</div>                               <br>                               <div class="pregunta">{{Oracion}}</div>                               <br>                               <img src="{{Imagen}}">                               <br>                               <div class="pregunta">{{Footer}}</div>                               <br>                               <hr>                               <br>                               <div class="info">Sinónimos / Antónimos: {{Sinonimos_Antonimos}}</div>                               <br>                               <div class="info">Definición: {{Definicion}}</div>"""            # Aquí se añade al modelo la plantilla anterior            mw.col.models.addTemplate(model, t)            # Aquí se añade el modelo a Anki            mw.col.models.add(model)    def hacer_hueco(self):        cursor = self.ui.txt_huecos.textCursor()        start = cursor.selectionStart()        end = cursor.selectionEnd()        text = self.ui.txt_huecos.toPlainText()        text_modified = text[:start] + '_' * (end - start) + text[end:]        text_modified = self.re_hidden.sub(r'<span style="background-color:yellow">\1</span>', text_modified)        text_modified = self.convertRCtoBR(text_modified)        self.ui.txt_huecos.setHtml(text_modified)        self.tarjeta['huecos'] = self.ui.txt_huecos.toHtml()    def anadir_tarjeta(self):        # Añadimos los archivos multimedia a la colección multimedia de Anki        if 'imagen' in self.tarjeta:            file_imagen = mw.col.media.add_file(self.tarjeta['imagen'])        else:            file_imagen = mw.col.media.add_file(os.path.join(os.path.join(                os.path.dirname(__file__), 'images'), 'default.png'))        if 'audio' in self.tarjeta and self.ui.chk_audio.isChecked():            file_audio = mw.col.media.add_file(self.tarjeta['audio'])            model = mw.col.models.by_name('gaudete with audio')        else:            model = mw.col.models.by_name('gaudete')            file_audio = None        mw.col.models.set_current(model)        # Creo una tarjeta nueva, relleno sus campos y la añado al deck actual        note = mw.col.newNote(False)        note['Header'] = '<center><table><tr><td>'        if self.ui.chk_header1.isChecked():            note['Header'] += self.tarjeta['header1']            if self.ui.chk_header2.isChecked():                note['Header'] += '</td></tr><tr><td>' + self.tarjeta['header2']            note['Header'] += '</td></tr></table></center>'        elif self.ui.chk_header2.isChecked():            note['Header'] += self.tarjeta['header2'] + '</td></tr></table></center>'        else:            note['Header'] = ''        note["Oracion"] = self.tarjeta['huecos']        note["Respuesta"] = self.tarjeta['oracion']        note['Footer'] = '<center><table><tr><td>'        if self.ui.chk_footer1.isChecked():            note["Footer"] += self.tarjeta['footer1']            if self.ui.chk_footer2.isChecked():                note["Footer"] += '</td></tr><tr><td>' + self.tarjeta['footer2']            note['Footer'] += '</td></tr></table></center>'        elif self.ui.chk_footer2.isChecked():            note['Footer'] += self.tarjeta['footer2'] + '</td></tr></table></center>'        else:            note['Footer'] = ''        note["Imagen"] = file_imagen        if file_audio:            note["Audio"] = file_audio        if self.ui.line_sinonimos.text() != '':            note['Sinonimos_Antonimos'] = self.ui.line_sinonimos.text()        else:            note['Sinonimos_Antonimos'] = '-'        if self.ui.line_definicion.text() != '':            note['Definicion'] = self.ui.line_definicion.text()        else:            note['Definicion'] = '-'        # Se añade al mazo actual        deck_id = mw.col.decks.current()['id']        # Añadir la tarjeta        mw.col.add_note(note, deck_id)        # Reset del interfaz (hace falta después de meter tarjetas nuevas)        mw.reset()        QMessageBox.information(self, 'Gaudete', '¡Tarjeta añadida!')# El método onGaudete crea el cuadro de diálogo de la extensióndef onGaudete(editor):    GaudeteDialog()# El botón de la extensión lanza el método onGaudetedef anadir_boton(buttons, editor):    icon_path = os.path.join(        os.path.join(os.path.dirname(__file__), 'images'), 'icon.png')    new_button = editor.addButton(icon_path,                                  'Gaudete',                                  onGaudete,                                  tip="Add from video")    buttons.append(new_button)    return buttons# Instala el botón del plugin al crear la barra de herramientasgui_hooks.editor_did_init_buttons.append(anadir_boton)